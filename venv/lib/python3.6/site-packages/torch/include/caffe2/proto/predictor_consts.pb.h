// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/predictor_consts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_caffe2_2fproto_2fpredictor_5fconsts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_caffe2_2fproto_2fpredictor_5fconsts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_caffe2_2fproto_2fpredictor_5fconsts_2eproto TORCH_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TORCH_API TableStruct_caffe2_2fproto_2fpredictor_5fconsts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern TORCH_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_caffe2_2fproto_2fpredictor_5fconsts_2eproto;
namespace caffe2 { const ::std::string& GetEmptyStringAlreadyInited(); 
class PredictorConsts;
class PredictorConstsDefaultTypeInternal;
TORCH_API extern PredictorConstsDefaultTypeInternal _PredictorConsts_default_instance_;
}  // namespace caffe2
PROTOBUF_NAMESPACE_OPEN
template<> TORCH_API ::caffe2::PredictorConsts* Arena::CreateMaybeMessage<::caffe2::PredictorConsts>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace caffe2 {

// ===================================================================

class TORCH_API PredictorConsts PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe2.PredictorConsts) */ {
 public:
  inline PredictorConsts() : PredictorConsts(nullptr) {}
  virtual ~PredictorConsts();

  PredictorConsts(const PredictorConsts& from);
  PredictorConsts(PredictorConsts&& from) noexcept
    : PredictorConsts() {
    *this = ::std::move(from);
  }

  inline PredictorConsts& operator=(const PredictorConsts& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictorConsts& operator=(PredictorConsts&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictorConsts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorConsts* internal_default_instance() {
    return reinterpret_cast<const PredictorConsts*>(
               &_PredictorConsts_default_instance_);
  }
  static int const kIndexInFileMessages =
    0;

  friend void swap(PredictorConsts& a, PredictorConsts& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictorConsts* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictorConsts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictorConsts* New() const final {
    return CreateMaybeMessage<PredictorConsts>(nullptr);
  }

  PredictorConsts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictorConsts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictorConsts& from);
  void MergeFrom(const PredictorConsts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictorConsts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe2.PredictorConsts";
  }
  protected:
  explicit PredictorConsts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe2_2fproto_2fpredictor_5fconsts_2eproto);
    return ::descriptor_table_caffe2_2fproto_2fpredictor_5fconsts_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMETANETDEFFieldNumber = 1,
    kPREDICTORDBREADERFieldNumber = 2,
    kPARAMETERSBLOBTYPEFieldNumber = 3,
    kINPUTSBLOBTYPEFieldNumber = 4,
    kOUTPUTSBLOBTYPEFieldNumber = 5,
    kGLOBALINITNETTYPEFieldNumber = 6,
    kPREDICTINITNETTYPEFieldNumber = 7,
    kPREDICTNETTYPEFieldNumber = 8,
    kSINGLEPREDICTORFieldNumber = 9,
    kMULTIPREDICTORFieldNumber = 10,
    kTRAININITPLANTYPEFieldNumber = 11,
    kTRAINPLANTYPEFieldNumber = 12,
    kSHAPEINFOBLOBFieldNumber = 13,
    kDEFERREDBLOBREADERFieldNumber = 14,
  };
  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  bool has_meta_net_def() const;
  private:
  bool _internal_has_meta_net_def() const;
  public:
  void clear_meta_net_def();
  const std::string& meta_net_def() const;
  void set_meta_net_def(const std::string& value);
  void set_meta_net_def(std::string&& value);
  void set_meta_net_def(const char* value);
  void set_meta_net_def(const char* value, size_t size);
  std::string* mutable_meta_net_def();
  std::string* release_meta_net_def();
  void set_allocated_meta_net_def(std::string* meta_net_def);
  private:
  const std::string& _internal_meta_net_def() const;
  void _internal_set_meta_net_def(const std::string& value);
  std::string* _internal_mutable_meta_net_def();
  public:

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  bool has_predictor_dbreader() const;
  private:
  bool _internal_has_predictor_dbreader() const;
  public:
  void clear_predictor_dbreader();
  const std::string& predictor_dbreader() const;
  void set_predictor_dbreader(const std::string& value);
  void set_predictor_dbreader(std::string&& value);
  void set_predictor_dbreader(const char* value);
  void set_predictor_dbreader(const char* value, size_t size);
  std::string* mutable_predictor_dbreader();
  std::string* release_predictor_dbreader();
  void set_allocated_predictor_dbreader(std::string* predictor_dbreader);
  private:
  const std::string& _internal_predictor_dbreader() const;
  void _internal_set_predictor_dbreader(const std::string& value);
  std::string* _internal_mutable_predictor_dbreader();
  public:

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  bool has_parameters_blob_type() const;
  private:
  bool _internal_has_parameters_blob_type() const;
  public:
  void clear_parameters_blob_type();
  const std::string& parameters_blob_type() const;
  void set_parameters_blob_type(const std::string& value);
  void set_parameters_blob_type(std::string&& value);
  void set_parameters_blob_type(const char* value);
  void set_parameters_blob_type(const char* value, size_t size);
  std::string* mutable_parameters_blob_type();
  std::string* release_parameters_blob_type();
  void set_allocated_parameters_blob_type(std::string* parameters_blob_type);
  private:
  const std::string& _internal_parameters_blob_type() const;
  void _internal_set_parameters_blob_type(const std::string& value);
  std::string* _internal_mutable_parameters_blob_type();
  public:

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  bool has_inputs_blob_type() const;
  private:
  bool _internal_has_inputs_blob_type() const;
  public:
  void clear_inputs_blob_type();
  const std::string& inputs_blob_type() const;
  void set_inputs_blob_type(const std::string& value);
  void set_inputs_blob_type(std::string&& value);
  void set_inputs_blob_type(const char* value);
  void set_inputs_blob_type(const char* value, size_t size);
  std::string* mutable_inputs_blob_type();
  std::string* release_inputs_blob_type();
  void set_allocated_inputs_blob_type(std::string* inputs_blob_type);
  private:
  const std::string& _internal_inputs_blob_type() const;
  void _internal_set_inputs_blob_type(const std::string& value);
  std::string* _internal_mutable_inputs_blob_type();
  public:

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  bool has_outputs_blob_type() const;
  private:
  bool _internal_has_outputs_blob_type() const;
  public:
  void clear_outputs_blob_type();
  const std::string& outputs_blob_type() const;
  void set_outputs_blob_type(const std::string& value);
  void set_outputs_blob_type(std::string&& value);
  void set_outputs_blob_type(const char* value);
  void set_outputs_blob_type(const char* value, size_t size);
  std::string* mutable_outputs_blob_type();
  std::string* release_outputs_blob_type();
  void set_allocated_outputs_blob_type(std::string* outputs_blob_type);
  private:
  const std::string& _internal_outputs_blob_type() const;
  void _internal_set_outputs_blob_type(const std::string& value);
  std::string* _internal_mutable_outputs_blob_type();
  public:

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  bool has_global_init_net_type() const;
  private:
  bool _internal_has_global_init_net_type() const;
  public:
  void clear_global_init_net_type();
  const std::string& global_init_net_type() const;
  void set_global_init_net_type(const std::string& value);
  void set_global_init_net_type(std::string&& value);
  void set_global_init_net_type(const char* value);
  void set_global_init_net_type(const char* value, size_t size);
  std::string* mutable_global_init_net_type();
  std::string* release_global_init_net_type();
  void set_allocated_global_init_net_type(std::string* global_init_net_type);
  private:
  const std::string& _internal_global_init_net_type() const;
  void _internal_set_global_init_net_type(const std::string& value);
  std::string* _internal_mutable_global_init_net_type();
  public:

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  bool has_predict_init_net_type() const;
  private:
  bool _internal_has_predict_init_net_type() const;
  public:
  void clear_predict_init_net_type();
  const std::string& predict_init_net_type() const;
  void set_predict_init_net_type(const std::string& value);
  void set_predict_init_net_type(std::string&& value);
  void set_predict_init_net_type(const char* value);
  void set_predict_init_net_type(const char* value, size_t size);
  std::string* mutable_predict_init_net_type();
  std::string* release_predict_init_net_type();
  void set_allocated_predict_init_net_type(std::string* predict_init_net_type);
  private:
  const std::string& _internal_predict_init_net_type() const;
  void _internal_set_predict_init_net_type(const std::string& value);
  std::string* _internal_mutable_predict_init_net_type();
  public:

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  bool has_predict_net_type() const;
  private:
  bool _internal_has_predict_net_type() const;
  public:
  void clear_predict_net_type();
  const std::string& predict_net_type() const;
  void set_predict_net_type(const std::string& value);
  void set_predict_net_type(std::string&& value);
  void set_predict_net_type(const char* value);
  void set_predict_net_type(const char* value, size_t size);
  std::string* mutable_predict_net_type();
  std::string* release_predict_net_type();
  void set_allocated_predict_net_type(std::string* predict_net_type);
  private:
  const std::string& _internal_predict_net_type() const;
  void _internal_set_predict_net_type(const std::string& value);
  std::string* _internal_mutable_predict_net_type();
  public:

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  bool has_single_predictor() const;
  private:
  bool _internal_has_single_predictor() const;
  public:
  void clear_single_predictor();
  const std::string& single_predictor() const;
  void set_single_predictor(const std::string& value);
  void set_single_predictor(std::string&& value);
  void set_single_predictor(const char* value);
  void set_single_predictor(const char* value, size_t size);
  std::string* mutable_single_predictor();
  std::string* release_single_predictor();
  void set_allocated_single_predictor(std::string* single_predictor);
  private:
  const std::string& _internal_single_predictor() const;
  void _internal_set_single_predictor(const std::string& value);
  std::string* _internal_mutable_single_predictor();
  public:

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  bool has_multi_predictor() const;
  private:
  bool _internal_has_multi_predictor() const;
  public:
  void clear_multi_predictor();
  const std::string& multi_predictor() const;
  void set_multi_predictor(const std::string& value);
  void set_multi_predictor(std::string&& value);
  void set_multi_predictor(const char* value);
  void set_multi_predictor(const char* value, size_t size);
  std::string* mutable_multi_predictor();
  std::string* release_multi_predictor();
  void set_allocated_multi_predictor(std::string* multi_predictor);
  private:
  const std::string& _internal_multi_predictor() const;
  void _internal_set_multi_predictor(const std::string& value);
  std::string* _internal_mutable_multi_predictor();
  public:

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  bool has_train_init_plan_type() const;
  private:
  bool _internal_has_train_init_plan_type() const;
  public:
  void clear_train_init_plan_type();
  const std::string& train_init_plan_type() const;
  void set_train_init_plan_type(const std::string& value);
  void set_train_init_plan_type(std::string&& value);
  void set_train_init_plan_type(const char* value);
  void set_train_init_plan_type(const char* value, size_t size);
  std::string* mutable_train_init_plan_type();
  std::string* release_train_init_plan_type();
  void set_allocated_train_init_plan_type(std::string* train_init_plan_type);
  private:
  const std::string& _internal_train_init_plan_type() const;
  void _internal_set_train_init_plan_type(const std::string& value);
  std::string* _internal_mutable_train_init_plan_type();
  public:

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  bool has_train_plan_type() const;
  private:
  bool _internal_has_train_plan_type() const;
  public:
  void clear_train_plan_type();
  const std::string& train_plan_type() const;
  void set_train_plan_type(const std::string& value);
  void set_train_plan_type(std::string&& value);
  void set_train_plan_type(const char* value);
  void set_train_plan_type(const char* value, size_t size);
  std::string* mutable_train_plan_type();
  std::string* release_train_plan_type();
  void set_allocated_train_plan_type(std::string* train_plan_type);
  private:
  const std::string& _internal_train_plan_type() const;
  void _internal_set_train_plan_type(const std::string& value);
  std::string* _internal_mutable_train_plan_type();
  public:

  // optional string SHAPE_INFO_BLOB = 13 [default = "SHAPE_INFO_BLOB"];
  bool has_shape_info_blob() const;
  private:
  bool _internal_has_shape_info_blob() const;
  public:
  void clear_shape_info_blob();
  const std::string& shape_info_blob() const;
  void set_shape_info_blob(const std::string& value);
  void set_shape_info_blob(std::string&& value);
  void set_shape_info_blob(const char* value);
  void set_shape_info_blob(const char* value, size_t size);
  std::string* mutable_shape_info_blob();
  std::string* release_shape_info_blob();
  void set_allocated_shape_info_blob(std::string* shape_info_blob);
  private:
  const std::string& _internal_shape_info_blob() const;
  void _internal_set_shape_info_blob(const std::string& value);
  std::string* _internal_mutable_shape_info_blob();
  public:

  // optional string DEFERRED_BLOB_READER = 14 [default = "__DEFERRED_BLOB_READER__"];
  bool has_deferred_blob_reader() const;
  private:
  bool _internal_has_deferred_blob_reader() const;
  public:
  void clear_deferred_blob_reader();
  const std::string& deferred_blob_reader() const;
  void set_deferred_blob_reader(const std::string& value);
  void set_deferred_blob_reader(std::string&& value);
  void set_deferred_blob_reader(const char* value);
  void set_deferred_blob_reader(const char* value, size_t size);
  std::string* mutable_deferred_blob_reader();
  std::string* release_deferred_blob_reader();
  void set_allocated_deferred_blob_reader(std::string* deferred_blob_reader);
  private:
  const std::string& _internal_deferred_blob_reader() const;
  void _internal_set_deferred_blob_reader(const std::string& value);
  std::string* _internal_mutable_deferred_blob_reader();
  public:

  // @@protoc_insertion_point(class_scope:caffe2.PredictorConsts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_meta_net_def_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_net_def_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_predictor_dbreader_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predictor_dbreader_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_parameters_blob_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameters_blob_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_inputs_blob_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputs_blob_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_outputs_blob_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputs_blob_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_global_init_net_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_init_net_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_predict_init_net_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predict_init_net_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_predict_net_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predict_net_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_single_predictor_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr single_predictor_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_multi_predictor_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multi_predictor_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_train_init_plan_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr train_init_plan_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_train_plan_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr train_plan_type_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_shape_info_blob_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shape_info_blob_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_deferred_blob_reader_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deferred_blob_reader_;
  friend struct ::TableStruct_caffe2_2fproto_2fpredictor_5fconsts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PredictorConsts

// optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
inline bool PredictorConsts::_internal_has_meta_net_def() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PredictorConsts::has_meta_net_def() const {
  return _internal_has_meta_net_def();
}
inline void PredictorConsts::clear_meta_net_def() {
  meta_net_def_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PredictorConsts::meta_net_def() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.META_NET_DEF)
  return _internal_meta_net_def();
}
inline void PredictorConsts::set_meta_net_def(const std::string& value) {
  _internal_set_meta_net_def(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.META_NET_DEF)
}
inline std::string* PredictorConsts::mutable_meta_net_def() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.META_NET_DEF)
  return _internal_mutable_meta_net_def();
}
inline const std::string& PredictorConsts::_internal_meta_net_def() const {
  return meta_net_def_.Get();
}
inline void PredictorConsts::_internal_set_meta_net_def(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  meta_net_def_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), value, GetArena());
}
inline void PredictorConsts::set_meta_net_def(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  meta_net_def_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.META_NET_DEF)
}
inline void PredictorConsts::set_meta_net_def(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  meta_net_def_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.META_NET_DEF)
}
inline void PredictorConsts::set_meta_net_def(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  meta_net_def_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.META_NET_DEF)
}
inline std::string* PredictorConsts::_internal_mutable_meta_net_def() {
  _has_bits_[0] |= 0x00000001u;
  return meta_net_def_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), GetArena());
}
inline std::string* PredictorConsts::release_meta_net_def() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.META_NET_DEF)
  if (!_internal_has_meta_net_def()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return meta_net_def_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_meta_net_def(std::string* meta_net_def) {
  if (meta_net_def != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  meta_net_def_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), meta_net_def,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.META_NET_DEF)
}

// optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
inline bool PredictorConsts::_internal_has_predictor_dbreader() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PredictorConsts::has_predictor_dbreader() const {
  return _internal_has_predictor_dbreader();
}
inline void PredictorConsts::clear_predictor_dbreader() {
  predictor_dbreader_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PredictorConsts::predictor_dbreader() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return _internal_predictor_dbreader();
}
inline void PredictorConsts::set_predictor_dbreader(const std::string& value) {
  _internal_set_predictor_dbreader(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
inline std::string* PredictorConsts::mutable_predictor_dbreader() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return _internal_mutable_predictor_dbreader();
}
inline const std::string& PredictorConsts::_internal_predictor_dbreader() const {
  return predictor_dbreader_.Get();
}
inline void PredictorConsts::_internal_set_predictor_dbreader(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  predictor_dbreader_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), value, GetArena());
}
inline void PredictorConsts::set_predictor_dbreader(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  predictor_dbreader_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
inline void PredictorConsts::set_predictor_dbreader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  predictor_dbreader_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
inline void PredictorConsts::set_predictor_dbreader(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  predictor_dbreader_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
inline std::string* PredictorConsts::_internal_mutable_predictor_dbreader() {
  _has_bits_[0] |= 0x00000002u;
  return predictor_dbreader_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), GetArena());
}
inline std::string* PredictorConsts::release_predictor_dbreader() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  if (!_internal_has_predictor_dbreader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return predictor_dbreader_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_predictor_dbreader(std::string* predictor_dbreader) {
  if (predictor_dbreader != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  predictor_dbreader_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), predictor_dbreader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}

// optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
inline bool PredictorConsts::_internal_has_parameters_blob_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PredictorConsts::has_parameters_blob_type() const {
  return _internal_has_parameters_blob_type();
}
inline void PredictorConsts::clear_parameters_blob_type() {
  parameters_blob_type_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PredictorConsts::parameters_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return _internal_parameters_blob_type();
}
inline void PredictorConsts::set_parameters_blob_type(const std::string& value) {
  _internal_set_parameters_blob_type(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
inline std::string* PredictorConsts::mutable_parameters_blob_type() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return _internal_mutable_parameters_blob_type();
}
inline const std::string& PredictorConsts::_internal_parameters_blob_type() const {
  return parameters_blob_type_.Get();
}
inline void PredictorConsts::_internal_set_parameters_blob_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  parameters_blob_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), value, GetArena());
}
inline void PredictorConsts::set_parameters_blob_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  parameters_blob_type_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
inline void PredictorConsts::set_parameters_blob_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  parameters_blob_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
inline void PredictorConsts::set_parameters_blob_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  parameters_blob_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
inline std::string* PredictorConsts::_internal_mutable_parameters_blob_type() {
  _has_bits_[0] |= 0x00000004u;
  return parameters_blob_type_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), GetArena());
}
inline std::string* PredictorConsts::release_parameters_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  if (!_internal_has_parameters_blob_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return parameters_blob_type_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_parameters_blob_type(std::string* parameters_blob_type) {
  if (parameters_blob_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parameters_blob_type_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), parameters_blob_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}

// optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
inline bool PredictorConsts::_internal_has_inputs_blob_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PredictorConsts::has_inputs_blob_type() const {
  return _internal_has_inputs_blob_type();
}
inline void PredictorConsts::clear_inputs_blob_type() {
  inputs_blob_type_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PredictorConsts::inputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return _internal_inputs_blob_type();
}
inline void PredictorConsts::set_inputs_blob_type(const std::string& value) {
  _internal_set_inputs_blob_type(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
inline std::string* PredictorConsts::mutable_inputs_blob_type() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return _internal_mutable_inputs_blob_type();
}
inline const std::string& PredictorConsts::_internal_inputs_blob_type() const {
  return inputs_blob_type_.Get();
}
inline void PredictorConsts::_internal_set_inputs_blob_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  inputs_blob_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), value, GetArena());
}
inline void PredictorConsts::set_inputs_blob_type(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  inputs_blob_type_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_inputs_blob_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  inputs_blob_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_inputs_blob_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  inputs_blob_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
inline std::string* PredictorConsts::_internal_mutable_inputs_blob_type() {
  _has_bits_[0] |= 0x00000008u;
  return inputs_blob_type_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), GetArena());
}
inline std::string* PredictorConsts::release_inputs_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  if (!_internal_has_inputs_blob_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return inputs_blob_type_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_inputs_blob_type(std::string* inputs_blob_type) {
  if (inputs_blob_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  inputs_blob_type_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), inputs_blob_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}

// optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
inline bool PredictorConsts::_internal_has_outputs_blob_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PredictorConsts::has_outputs_blob_type() const {
  return _internal_has_outputs_blob_type();
}
inline void PredictorConsts::clear_outputs_blob_type() {
  outputs_blob_type_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& PredictorConsts::outputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return _internal_outputs_blob_type();
}
inline void PredictorConsts::set_outputs_blob_type(const std::string& value) {
  _internal_set_outputs_blob_type(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
inline std::string* PredictorConsts::mutable_outputs_blob_type() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return _internal_mutable_outputs_blob_type();
}
inline const std::string& PredictorConsts::_internal_outputs_blob_type() const {
  return outputs_blob_type_.Get();
}
inline void PredictorConsts::_internal_set_outputs_blob_type(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  outputs_blob_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), value, GetArena());
}
inline void PredictorConsts::set_outputs_blob_type(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  outputs_blob_type_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_outputs_blob_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  outputs_blob_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
inline void PredictorConsts::set_outputs_blob_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  outputs_blob_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
inline std::string* PredictorConsts::_internal_mutable_outputs_blob_type() {
  _has_bits_[0] |= 0x00000010u;
  return outputs_blob_type_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), GetArena());
}
inline std::string* PredictorConsts::release_outputs_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  if (!_internal_has_outputs_blob_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return outputs_blob_type_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_outputs_blob_type(std::string* outputs_blob_type) {
  if (outputs_blob_type != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  outputs_blob_type_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), outputs_blob_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}

// optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
inline bool PredictorConsts::_internal_has_global_init_net_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PredictorConsts::has_global_init_net_type() const {
  return _internal_has_global_init_net_type();
}
inline void PredictorConsts::clear_global_init_net_type() {
  global_init_net_type_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& PredictorConsts::global_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return _internal_global_init_net_type();
}
inline void PredictorConsts::set_global_init_net_type(const std::string& value) {
  _internal_set_global_init_net_type(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
inline std::string* PredictorConsts::mutable_global_init_net_type() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return _internal_mutable_global_init_net_type();
}
inline const std::string& PredictorConsts::_internal_global_init_net_type() const {
  return global_init_net_type_.Get();
}
inline void PredictorConsts::_internal_set_global_init_net_type(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  global_init_net_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), value, GetArena());
}
inline void PredictorConsts::set_global_init_net_type(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  global_init_net_type_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
inline void PredictorConsts::set_global_init_net_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  global_init_net_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
inline void PredictorConsts::set_global_init_net_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  global_init_net_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
inline std::string* PredictorConsts::_internal_mutable_global_init_net_type() {
  _has_bits_[0] |= 0x00000020u;
  return global_init_net_type_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), GetArena());
}
inline std::string* PredictorConsts::release_global_init_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  if (!_internal_has_global_init_net_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return global_init_net_type_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_global_init_net_type(std::string* global_init_net_type) {
  if (global_init_net_type != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  global_init_net_type_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), global_init_net_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}

// optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
inline bool PredictorConsts::_internal_has_predict_init_net_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PredictorConsts::has_predict_init_net_type() const {
  return _internal_has_predict_init_net_type();
}
inline void PredictorConsts::clear_predict_init_net_type() {
  predict_init_net_type_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& PredictorConsts::predict_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return _internal_predict_init_net_type();
}
inline void PredictorConsts::set_predict_init_net_type(const std::string& value) {
  _internal_set_predict_init_net_type(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
inline std::string* PredictorConsts::mutable_predict_init_net_type() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return _internal_mutable_predict_init_net_type();
}
inline const std::string& PredictorConsts::_internal_predict_init_net_type() const {
  return predict_init_net_type_.Get();
}
inline void PredictorConsts::_internal_set_predict_init_net_type(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  predict_init_net_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), value, GetArena());
}
inline void PredictorConsts::set_predict_init_net_type(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  predict_init_net_type_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
inline void PredictorConsts::set_predict_init_net_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  predict_init_net_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
inline void PredictorConsts::set_predict_init_net_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  predict_init_net_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
inline std::string* PredictorConsts::_internal_mutable_predict_init_net_type() {
  _has_bits_[0] |= 0x00000040u;
  return predict_init_net_type_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), GetArena());
}
inline std::string* PredictorConsts::release_predict_init_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  if (!_internal_has_predict_init_net_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return predict_init_net_type_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_predict_init_net_type(std::string* predict_init_net_type) {
  if (predict_init_net_type != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  predict_init_net_type_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), predict_init_net_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}

// optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
inline bool PredictorConsts::_internal_has_predict_net_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PredictorConsts::has_predict_net_type() const {
  return _internal_has_predict_net_type();
}
inline void PredictorConsts::clear_predict_net_type() {
  predict_net_type_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& PredictorConsts::predict_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return _internal_predict_net_type();
}
inline void PredictorConsts::set_predict_net_type(const std::string& value) {
  _internal_set_predict_net_type(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
inline std::string* PredictorConsts::mutable_predict_net_type() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return _internal_mutable_predict_net_type();
}
inline const std::string& PredictorConsts::_internal_predict_net_type() const {
  return predict_net_type_.Get();
}
inline void PredictorConsts::_internal_set_predict_net_type(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  predict_net_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), value, GetArena());
}
inline void PredictorConsts::set_predict_net_type(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  predict_net_type_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
inline void PredictorConsts::set_predict_net_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  predict_net_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
inline void PredictorConsts::set_predict_net_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  predict_net_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
inline std::string* PredictorConsts::_internal_mutable_predict_net_type() {
  _has_bits_[0] |= 0x00000080u;
  return predict_net_type_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), GetArena());
}
inline std::string* PredictorConsts::release_predict_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  if (!_internal_has_predict_net_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return predict_net_type_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_predict_net_type(std::string* predict_net_type) {
  if (predict_net_type != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  predict_net_type_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), predict_net_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}

// optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
inline bool PredictorConsts::_internal_has_single_predictor() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PredictorConsts::has_single_predictor() const {
  return _internal_has_single_predictor();
}
inline void PredictorConsts::clear_single_predictor() {
  single_predictor_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& PredictorConsts::single_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return _internal_single_predictor();
}
inline void PredictorConsts::set_single_predictor(const std::string& value) {
  _internal_set_single_predictor(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
inline std::string* PredictorConsts::mutable_single_predictor() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return _internal_mutable_single_predictor();
}
inline const std::string& PredictorConsts::_internal_single_predictor() const {
  return single_predictor_.Get();
}
inline void PredictorConsts::_internal_set_single_predictor(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  single_predictor_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), value, GetArena());
}
inline void PredictorConsts::set_single_predictor(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  single_predictor_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
inline void PredictorConsts::set_single_predictor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  single_predictor_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
inline void PredictorConsts::set_single_predictor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  single_predictor_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
inline std::string* PredictorConsts::_internal_mutable_single_predictor() {
  _has_bits_[0] |= 0x00000100u;
  return single_predictor_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), GetArena());
}
inline std::string* PredictorConsts::release_single_predictor() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  if (!_internal_has_single_predictor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return single_predictor_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_single_predictor(std::string* single_predictor) {
  if (single_predictor != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  single_predictor_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), single_predictor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}

// optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
inline bool PredictorConsts::_internal_has_multi_predictor() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PredictorConsts::has_multi_predictor() const {
  return _internal_has_multi_predictor();
}
inline void PredictorConsts::clear_multi_predictor() {
  multi_predictor_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& PredictorConsts::multi_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return _internal_multi_predictor();
}
inline void PredictorConsts::set_multi_predictor(const std::string& value) {
  _internal_set_multi_predictor(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
inline std::string* PredictorConsts::mutable_multi_predictor() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return _internal_mutable_multi_predictor();
}
inline const std::string& PredictorConsts::_internal_multi_predictor() const {
  return multi_predictor_.Get();
}
inline void PredictorConsts::_internal_set_multi_predictor(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  multi_predictor_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), value, GetArena());
}
inline void PredictorConsts::set_multi_predictor(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  multi_predictor_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
inline void PredictorConsts::set_multi_predictor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  multi_predictor_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
inline void PredictorConsts::set_multi_predictor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  multi_predictor_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
inline std::string* PredictorConsts::_internal_mutable_multi_predictor() {
  _has_bits_[0] |= 0x00000200u;
  return multi_predictor_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), GetArena());
}
inline std::string* PredictorConsts::release_multi_predictor() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.MULTI_PREDICTOR)
  if (!_internal_has_multi_predictor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return multi_predictor_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_multi_predictor(std::string* multi_predictor) {
  if (multi_predictor != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  multi_predictor_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), multi_predictor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.MULTI_PREDICTOR)
}

// optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
inline bool PredictorConsts::_internal_has_train_init_plan_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PredictorConsts::has_train_init_plan_type() const {
  return _internal_has_train_init_plan_type();
}
inline void PredictorConsts::clear_train_init_plan_type() {
  train_init_plan_type_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& PredictorConsts::train_init_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return _internal_train_init_plan_type();
}
inline void PredictorConsts::set_train_init_plan_type(const std::string& value) {
  _internal_set_train_init_plan_type(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
inline std::string* PredictorConsts::mutable_train_init_plan_type() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return _internal_mutable_train_init_plan_type();
}
inline const std::string& PredictorConsts::_internal_train_init_plan_type() const {
  return train_init_plan_type_.Get();
}
inline void PredictorConsts::_internal_set_train_init_plan_type(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  train_init_plan_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), value, GetArena());
}
inline void PredictorConsts::set_train_init_plan_type(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  train_init_plan_type_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
inline void PredictorConsts::set_train_init_plan_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  train_init_plan_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
inline void PredictorConsts::set_train_init_plan_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  train_init_plan_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
inline std::string* PredictorConsts::_internal_mutable_train_init_plan_type() {
  _has_bits_[0] |= 0x00000400u;
  return train_init_plan_type_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), GetArena());
}
inline std::string* PredictorConsts::release_train_init_plan_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  if (!_internal_has_train_init_plan_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return train_init_plan_type_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_train_init_plan_type(std::string* train_init_plan_type) {
  if (train_init_plan_type != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  train_init_plan_type_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), train_init_plan_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}

// optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
inline bool PredictorConsts::_internal_has_train_plan_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PredictorConsts::has_train_plan_type() const {
  return _internal_has_train_plan_type();
}
inline void PredictorConsts::clear_train_plan_type() {
  train_plan_type_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), GetArena());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& PredictorConsts::train_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return _internal_train_plan_type();
}
inline void PredictorConsts::set_train_plan_type(const std::string& value) {
  _internal_set_train_plan_type(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
inline std::string* PredictorConsts::mutable_train_plan_type() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return _internal_mutable_train_plan_type();
}
inline const std::string& PredictorConsts::_internal_train_plan_type() const {
  return train_plan_type_.Get();
}
inline void PredictorConsts::_internal_set_train_plan_type(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  train_plan_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), value, GetArena());
}
inline void PredictorConsts::set_train_plan_type(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  train_plan_type_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
inline void PredictorConsts::set_train_plan_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  train_plan_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
inline void PredictorConsts::set_train_plan_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  train_plan_type_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
inline std::string* PredictorConsts::_internal_mutable_train_plan_type() {
  _has_bits_[0] |= 0x00000800u;
  return train_plan_type_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), GetArena());
}
inline std::string* PredictorConsts::release_train_plan_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  if (!_internal_has_train_plan_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return train_plan_type_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_train_plan_type(std::string* train_plan_type) {
  if (train_plan_type != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  train_plan_type_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), train_plan_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}

// optional string SHAPE_INFO_BLOB = 13 [default = "SHAPE_INFO_BLOB"];
inline bool PredictorConsts::_internal_has_shape_info_blob() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PredictorConsts::has_shape_info_blob() const {
  return _internal_has_shape_info_blob();
}
inline void PredictorConsts::clear_shape_info_blob() {
  shape_info_blob_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_shape_info_blob_.get(), GetArena());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& PredictorConsts::shape_info_blob() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.SHAPE_INFO_BLOB)
  return _internal_shape_info_blob();
}
inline void PredictorConsts::set_shape_info_blob(const std::string& value) {
  _internal_set_shape_info_blob(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.SHAPE_INFO_BLOB)
}
inline std::string* PredictorConsts::mutable_shape_info_blob() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.SHAPE_INFO_BLOB)
  return _internal_mutable_shape_info_blob();
}
inline const std::string& PredictorConsts::_internal_shape_info_blob() const {
  return shape_info_blob_.Get();
}
inline void PredictorConsts::_internal_set_shape_info_blob(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  shape_info_blob_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_shape_info_blob_.get(), value, GetArena());
}
inline void PredictorConsts::set_shape_info_blob(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  shape_info_blob_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_shape_info_blob_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.SHAPE_INFO_BLOB)
}
inline void PredictorConsts::set_shape_info_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  shape_info_blob_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_shape_info_blob_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.SHAPE_INFO_BLOB)
}
inline void PredictorConsts::set_shape_info_blob(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  shape_info_blob_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_shape_info_blob_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.SHAPE_INFO_BLOB)
}
inline std::string* PredictorConsts::_internal_mutable_shape_info_blob() {
  _has_bits_[0] |= 0x00001000u;
  return shape_info_blob_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_shape_info_blob_.get(), GetArena());
}
inline std::string* PredictorConsts::release_shape_info_blob() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.SHAPE_INFO_BLOB)
  if (!_internal_has_shape_info_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return shape_info_blob_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_shape_info_blob_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_shape_info_blob(std::string* shape_info_blob) {
  if (shape_info_blob != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  shape_info_blob_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_shape_info_blob_.get(), shape_info_blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.SHAPE_INFO_BLOB)
}

// optional string DEFERRED_BLOB_READER = 14 [default = "__DEFERRED_BLOB_READER__"];
inline bool PredictorConsts::_internal_has_deferred_blob_reader() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PredictorConsts::has_deferred_blob_reader() const {
  return _internal_has_deferred_blob_reader();
}
inline void PredictorConsts::clear_deferred_blob_reader() {
  deferred_blob_reader_.ClearToDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_deferred_blob_reader_.get(), GetArena());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& PredictorConsts::deferred_blob_reader() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.DEFERRED_BLOB_READER)
  return _internal_deferred_blob_reader();
}
inline void PredictorConsts::set_deferred_blob_reader(const std::string& value) {
  _internal_set_deferred_blob_reader(value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.DEFERRED_BLOB_READER)
}
inline std::string* PredictorConsts::mutable_deferred_blob_reader() {
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.DEFERRED_BLOB_READER)
  return _internal_mutable_deferred_blob_reader();
}
inline const std::string& PredictorConsts::_internal_deferred_blob_reader() const {
  return deferred_blob_reader_.Get();
}
inline void PredictorConsts::_internal_set_deferred_blob_reader(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  deferred_blob_reader_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_deferred_blob_reader_.get(), value, GetArena());
}
inline void PredictorConsts::set_deferred_blob_reader(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  deferred_blob_reader_.Set(
    &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_deferred_blob_reader_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.PredictorConsts.DEFERRED_BLOB_READER)
}
inline void PredictorConsts::set_deferred_blob_reader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  deferred_blob_reader_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_deferred_blob_reader_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.DEFERRED_BLOB_READER)
}
inline void PredictorConsts::set_deferred_blob_reader(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  deferred_blob_reader_.Set(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_deferred_blob_reader_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.DEFERRED_BLOB_READER)
}
inline std::string* PredictorConsts::_internal_mutable_deferred_blob_reader() {
  _has_bits_[0] |= 0x00002000u;
  return deferred_blob_reader_.Mutable(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_deferred_blob_reader_.get(), GetArena());
}
inline std::string* PredictorConsts::release_deferred_blob_reader() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.DEFERRED_BLOB_READER)
  if (!_internal_has_deferred_blob_reader()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return deferred_blob_reader_.ReleaseNonDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_deferred_blob_reader_.get(), GetArena());
}
inline void PredictorConsts::set_allocated_deferred_blob_reader(std::string* deferred_blob_reader) {
  if (deferred_blob_reader != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  deferred_blob_reader_.SetAllocated(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_deferred_blob_reader_.get(), deferred_blob_reader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.DEFERRED_BLOB_READER)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_caffe2_2fproto_2fpredictor_5fconsts_2eproto
