// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/prof_dag.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_caffe2_2fproto_2fprof_5fdag_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_caffe2_2fproto_2fprof_5fdag_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_caffe2_2fproto_2fprof_5fdag_2eproto TORCH_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TORCH_API TableStruct_caffe2_2fproto_2fprof_5fdag_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern TORCH_API const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto;
namespace caffe2 { const ::std::string& GetEmptyStringAlreadyInited(); 
class BlobProfile;
class BlobProfileDefaultTypeInternal;
TORCH_API extern BlobProfileDefaultTypeInternal _BlobProfile_default_instance_;
class OpProfile;
class OpProfileDefaultTypeInternal;
TORCH_API extern OpProfileDefaultTypeInternal _OpProfile_default_instance_;
class ProfDAGProto;
class ProfDAGProtoDefaultTypeInternal;
TORCH_API extern ProfDAGProtoDefaultTypeInternal _ProfDAGProto_default_instance_;
class ProfDAGProtos;
class ProfDAGProtosDefaultTypeInternal;
TORCH_API extern ProfDAGProtosDefaultTypeInternal _ProfDAGProtos_default_instance_;
class TwoNumberStatsProto;
class TwoNumberStatsProtoDefaultTypeInternal;
TORCH_API extern TwoNumberStatsProtoDefaultTypeInternal _TwoNumberStatsProto_default_instance_;
}  // namespace caffe2
PROTOBUF_NAMESPACE_OPEN
template<> TORCH_API ::caffe2::BlobProfile* Arena::CreateMaybeMessage<::caffe2::BlobProfile>(Arena*);
template<> TORCH_API ::caffe2::OpProfile* Arena::CreateMaybeMessage<::caffe2::OpProfile>(Arena*);
template<> TORCH_API ::caffe2::ProfDAGProto* Arena::CreateMaybeMessage<::caffe2::ProfDAGProto>(Arena*);
template<> TORCH_API ::caffe2::ProfDAGProtos* Arena::CreateMaybeMessage<::caffe2::ProfDAGProtos>(Arena*);
template<> TORCH_API ::caffe2::TwoNumberStatsProto* Arena::CreateMaybeMessage<::caffe2::TwoNumberStatsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace caffe2 {

// ===================================================================

class TORCH_API TwoNumberStatsProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe2.TwoNumberStatsProto) */ {
 public:
  inline TwoNumberStatsProto() : TwoNumberStatsProto(nullptr) {}
  virtual ~TwoNumberStatsProto();

  TwoNumberStatsProto(const TwoNumberStatsProto& from);
  TwoNumberStatsProto(TwoNumberStatsProto&& from) noexcept
    : TwoNumberStatsProto() {
    *this = ::std::move(from);
  }

  inline TwoNumberStatsProto& operator=(const TwoNumberStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwoNumberStatsProto& operator=(TwoNumberStatsProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwoNumberStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwoNumberStatsProto* internal_default_instance() {
    return reinterpret_cast<const TwoNumberStatsProto*>(
               &_TwoNumberStatsProto_default_instance_);
  }
  static int const kIndexInFileMessages =
    0;

  friend void swap(TwoNumberStatsProto& a, TwoNumberStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TwoNumberStatsProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwoNumberStatsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwoNumberStatsProto* New() const final {
    return CreateMaybeMessage<TwoNumberStatsProto>(nullptr);
  }

  TwoNumberStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwoNumberStatsProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwoNumberStatsProto& from);
  void MergeFrom(const TwoNumberStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwoNumberStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe2.TwoNumberStatsProto";
  }
  protected:
  explicit TwoNumberStatsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto);
    return ::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeanFieldNumber = 1,
    kStddevFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // optional float mean = 1;
  bool has_mean() const;
  private:
  bool _internal_has_mean() const;
  public:
  void clear_mean();
  float mean() const;
  void set_mean(float value);
  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);
  public:

  // optional float stddev = 2;
  bool has_stddev() const;
  private:
  bool _internal_has_stddev() const;
  public:
  void clear_stddev();
  float stddev() const;
  void set_stddev(float value);
  private:
  float _internal_stddev() const;
  void _internal_set_stddev(float value);
  public:

  // optional int64 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:caffe2.TwoNumberStatsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float mean_;
  float stddev_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  friend struct ::TableStruct_caffe2_2fproto_2fprof_5fdag_2eproto;
};
// -------------------------------------------------------------------

class TORCH_API BlobProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe2.BlobProfile) */ {
 public:
  inline BlobProfile() : BlobProfile(nullptr) {}
  virtual ~BlobProfile();

  BlobProfile(const BlobProfile& from);
  BlobProfile(BlobProfile&& from) noexcept
    : BlobProfile() {
    *this = ::std::move(from);
  }

  inline BlobProfile& operator=(const BlobProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlobProfile& operator=(BlobProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlobProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProfile* internal_default_instance() {
    return reinterpret_cast<const BlobProfile*>(
               &_BlobProfile_default_instance_);
  }
  static int const kIndexInFileMessages =
    1;

  friend void swap(BlobProfile& a, BlobProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(BlobProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlobProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlobProfile* New() const final {
    return CreateMaybeMessage<BlobProfile>(nullptr);
  }

  BlobProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlobProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlobProfile& from);
  void MergeFrom(const BlobProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe2.BlobProfile";
  }
  protected:
  explicit BlobProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto);
    return ::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBytesUsedFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
  bool has_bytes_used() const;
  private:
  bool _internal_has_bytes_used() const;
  public:
  void clear_bytes_used();
  const ::caffe2::TwoNumberStatsProto& bytes_used() const;
  ::caffe2::TwoNumberStatsProto* release_bytes_used();
  ::caffe2::TwoNumberStatsProto* mutable_bytes_used();
  void set_allocated_bytes_used(::caffe2::TwoNumberStatsProto* bytes_used);
  private:
  const ::caffe2::TwoNumberStatsProto& _internal_bytes_used() const;
  ::caffe2::TwoNumberStatsProto* _internal_mutable_bytes_used();
  public:
  void unsafe_arena_set_allocated_bytes_used(
      ::caffe2::TwoNumberStatsProto* bytes_used);
  ::caffe2::TwoNumberStatsProto* unsafe_arena_release_bytes_used();

  // @@protoc_insertion_point(class_scope:caffe2.BlobProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::caffe2::TwoNumberStatsProto* bytes_used_;
  friend struct ::TableStruct_caffe2_2fproto_2fprof_5fdag_2eproto;
};
// -------------------------------------------------------------------

class TORCH_API ProfDAGProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe2.ProfDAGProto) */ {
 public:
  inline ProfDAGProto() : ProfDAGProto(nullptr) {}
  virtual ~ProfDAGProto();

  ProfDAGProto(const ProfDAGProto& from);
  ProfDAGProto(ProfDAGProto&& from) noexcept
    : ProfDAGProto() {
    *this = ::std::move(from);
  }

  inline ProfDAGProto& operator=(const ProfDAGProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfDAGProto& operator=(ProfDAGProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfDAGProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfDAGProto* internal_default_instance() {
    return reinterpret_cast<const ProfDAGProto*>(
               &_ProfDAGProto_default_instance_);
  }
  static int const kIndexInFileMessages =
    2;

  friend void swap(ProfDAGProto& a, ProfDAGProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfDAGProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfDAGProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfDAGProto* New() const final {
    return CreateMaybeMessage<ProfDAGProto>(nullptr);
  }

  ProfDAGProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfDAGProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfDAGProto& from);
  void MergeFrom(const ProfDAGProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfDAGProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe2.ProfDAGProto";
  }
  protected:
  explicit ProfDAGProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto);
    return ::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputProfileFieldNumber = 5,
    kExtraInfoFieldNumber = 7,
    kNameFieldNumber = 1,
    kExecutionTimeFieldNumber = 4,
    kMeanFieldNumber = 2,
    kStddevFieldNumber = 3,
  };
  // repeated .caffe2.BlobProfile output_profile = 5;
  int output_profile_size() const;
  private:
  int _internal_output_profile_size() const;
  public:
  void clear_output_profile();
  ::caffe2::BlobProfile* mutable_output_profile(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::BlobProfile >*
      mutable_output_profile();
  private:
  const ::caffe2::BlobProfile& _internal_output_profile(int index) const;
  ::caffe2::BlobProfile* _internal_add_output_profile();
  public:
  const ::caffe2::BlobProfile& output_profile(int index) const;
  ::caffe2::BlobProfile* add_output_profile();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::BlobProfile >&
      output_profile() const;

  // repeated string extra_info = 7;
  int extra_info_size() const;
  private:
  int _internal_extra_info_size() const;
  public:
  void clear_extra_info();
  const std::string& extra_info(int index) const;
  std::string* mutable_extra_info(int index);
  void set_extra_info(int index, const std::string& value);
  void set_extra_info(int index, std::string&& value);
  void set_extra_info(int index, const char* value);
  void set_extra_info(int index, const char* value, size_t size);
  std::string* add_extra_info();
  void add_extra_info(const std::string& value);
  void add_extra_info(std::string&& value);
  void add_extra_info(const char* value);
  void add_extra_info(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& extra_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_extra_info();
  private:
  const std::string& _internal_extra_info(int index) const;
  std::string* _internal_add_extra_info();
  public:

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .caffe2.TwoNumberStatsProto execution_time = 4;
  bool has_execution_time() const;
  private:
  bool _internal_has_execution_time() const;
  public:
  void clear_execution_time();
  const ::caffe2::TwoNumberStatsProto& execution_time() const;
  ::caffe2::TwoNumberStatsProto* release_execution_time();
  ::caffe2::TwoNumberStatsProto* mutable_execution_time();
  void set_allocated_execution_time(::caffe2::TwoNumberStatsProto* execution_time);
  private:
  const ::caffe2::TwoNumberStatsProto& _internal_execution_time() const;
  ::caffe2::TwoNumberStatsProto* _internal_mutable_execution_time();
  public:
  void unsafe_arena_set_allocated_execution_time(
      ::caffe2::TwoNumberStatsProto* execution_time);
  ::caffe2::TwoNumberStatsProto* unsafe_arena_release_execution_time();

  // required float mean = 2;
  bool has_mean() const;
  private:
  bool _internal_has_mean() const;
  public:
  void clear_mean();
  float mean() const;
  void set_mean(float value);
  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);
  public:

  // required float stddev = 3;
  bool has_stddev() const;
  private:
  bool _internal_has_stddev() const;
  public:
  void clear_stddev();
  float stddev() const;
  void set_stddev(float value);
  private:
  float _internal_stddev() const;
  void _internal_set_stddev(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe2.ProfDAGProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::BlobProfile > output_profile_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> extra_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::caffe2::TwoNumberStatsProto* execution_time_;
  float mean_;
  float stddev_;
  friend struct ::TableStruct_caffe2_2fproto_2fprof_5fdag_2eproto;
};
// -------------------------------------------------------------------

class TORCH_API ProfDAGProtos PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe2.ProfDAGProtos) */ {
 public:
  inline ProfDAGProtos() : ProfDAGProtos(nullptr) {}
  virtual ~ProfDAGProtos();

  ProfDAGProtos(const ProfDAGProtos& from);
  ProfDAGProtos(ProfDAGProtos&& from) noexcept
    : ProfDAGProtos() {
    *this = ::std::move(from);
  }

  inline ProfDAGProtos& operator=(const ProfDAGProtos& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfDAGProtos& operator=(ProfDAGProtos&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfDAGProtos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfDAGProtos* internal_default_instance() {
    return reinterpret_cast<const ProfDAGProtos*>(
               &_ProfDAGProtos_default_instance_);
  }
  static int const kIndexInFileMessages =
    3;

  friend void swap(ProfDAGProtos& a, ProfDAGProtos& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfDAGProtos* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfDAGProtos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfDAGProtos* New() const final {
    return CreateMaybeMessage<ProfDAGProtos>(nullptr);
  }

  ProfDAGProtos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfDAGProtos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfDAGProtos& from);
  void MergeFrom(const ProfDAGProtos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfDAGProtos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe2.ProfDAGProtos";
  }
  protected:
  explicit ProfDAGProtos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto);
    return ::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
    kOpsStatsFieldNumber = 3,
    kNetNameFieldNumber = 2,
  };
  // repeated .caffe2.ProfDAGProto stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::caffe2::ProfDAGProto* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::ProfDAGProto >*
      mutable_stats();
  private:
  const ::caffe2::ProfDAGProto& _internal_stats(int index) const;
  ::caffe2::ProfDAGProto* _internal_add_stats();
  public:
  const ::caffe2::ProfDAGProto& stats(int index) const;
  ::caffe2::ProfDAGProto* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::ProfDAGProto >&
      stats() const;

  // repeated .caffe2.OpProfile ops_stats = 3;
  int ops_stats_size() const;
  private:
  int _internal_ops_stats_size() const;
  public:
  void clear_ops_stats();
  ::caffe2::OpProfile* mutable_ops_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::OpProfile >*
      mutable_ops_stats();
  private:
  const ::caffe2::OpProfile& _internal_ops_stats(int index) const;
  ::caffe2::OpProfile* _internal_add_ops_stats();
  public:
  const ::caffe2::OpProfile& ops_stats(int index) const;
  ::caffe2::OpProfile* add_ops_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::OpProfile >&
      ops_stats() const;

  // optional string net_name = 2;
  bool has_net_name() const;
  private:
  bool _internal_has_net_name() const;
  public:
  void clear_net_name();
  const std::string& net_name() const;
  void set_net_name(const std::string& value);
  void set_net_name(std::string&& value);
  void set_net_name(const char* value);
  void set_net_name(const char* value, size_t size);
  std::string* mutable_net_name();
  std::string* release_net_name();
  void set_allocated_net_name(std::string* net_name);
  private:
  const std::string& _internal_net_name() const;
  void _internal_set_net_name(const std::string& value);
  std::string* _internal_mutable_net_name();
  public:

  // @@protoc_insertion_point(class_scope:caffe2.ProfDAGProtos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::ProfDAGProto > stats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::OpProfile > ops_stats_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_name_;
  friend struct ::TableStruct_caffe2_2fproto_2fprof_5fdag_2eproto;
};
// -------------------------------------------------------------------

class TORCH_API OpProfile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:caffe2.OpProfile) */ {
 public:
  inline OpProfile() : OpProfile(nullptr) {}
  virtual ~OpProfile();

  OpProfile(const OpProfile& from);
  OpProfile(OpProfile&& from) noexcept
    : OpProfile() {
    *this = ::std::move(from);
  }

  inline OpProfile& operator=(const OpProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpProfile& operator=(OpProfile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpProfile* internal_default_instance() {
    return reinterpret_cast<const OpProfile*>(
               &_OpProfile_default_instance_);
  }
  static int const kIndexInFileMessages =
    4;

  friend void swap(OpProfile& a, OpProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(OpProfile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpProfile* New() const final {
    return CreateMaybeMessage<OpProfile>(nullptr);
  }

  OpProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpProfile& from);
  void MergeFrom(const OpProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "caffe2.OpProfile";
  }
  protected:
  explicit OpProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto);
    return ::descriptor_table_caffe2_2fproto_2fprof_5fdag_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdxFieldNumber = 1,
    kNetNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kExecTimeSecsFieldNumber = 4,
  };
  // optional string idx = 1;
  bool has_idx() const;
  private:
  bool _internal_has_idx() const;
  public:
  void clear_idx();
  const std::string& idx() const;
  void set_idx(const std::string& value);
  void set_idx(std::string&& value);
  void set_idx(const char* value);
  void set_idx(const char* value, size_t size);
  std::string* mutable_idx();
  std::string* release_idx();
  void set_allocated_idx(std::string* idx);
  private:
  const std::string& _internal_idx() const;
  void _internal_set_idx(const std::string& value);
  std::string* _internal_mutable_idx();
  public:

  // optional string net_name = 2;
  bool has_net_name() const;
  private:
  bool _internal_has_net_name() const;
  public:
  void clear_net_name();
  const std::string& net_name() const;
  void set_net_name(const std::string& value);
  void set_net_name(std::string&& value);
  void set_net_name(const char* value);
  void set_net_name(const char* value, size_t size);
  std::string* mutable_net_name();
  std::string* release_net_name();
  void set_allocated_net_name(std::string* net_name);
  private:
  const std::string& _internal_net_name() const;
  void _internal_set_net_name(const std::string& value);
  std::string* _internal_mutable_net_name();
  public:

  // optional string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional float exec_time_secs = 4;
  bool has_exec_time_secs() const;
  private:
  bool _internal_has_exec_time_secs() const;
  public:
  void clear_exec_time_secs();
  float exec_time_secs() const;
  void set_exec_time_secs(float value);
  private:
  float _internal_exec_time_secs() const;
  void _internal_set_exec_time_secs(float value);
  public:

  // @@protoc_insertion_point(class_scope:caffe2.OpProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  float exec_time_secs_;
  friend struct ::TableStruct_caffe2_2fproto_2fprof_5fdag_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TwoNumberStatsProto

// optional float mean = 1;
inline bool TwoNumberStatsProto::_internal_has_mean() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TwoNumberStatsProto::has_mean() const {
  return _internal_has_mean();
}
inline void TwoNumberStatsProto::clear_mean() {
  mean_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TwoNumberStatsProto::_internal_mean() const {
  return mean_;
}
inline float TwoNumberStatsProto::mean() const {
  // @@protoc_insertion_point(field_get:caffe2.TwoNumberStatsProto.mean)
  return _internal_mean();
}
inline void TwoNumberStatsProto::_internal_set_mean(float value) {
  _has_bits_[0] |= 0x00000001u;
  mean_ = value;
}
inline void TwoNumberStatsProto::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:caffe2.TwoNumberStatsProto.mean)
}

// optional float stddev = 2;
inline bool TwoNumberStatsProto::_internal_has_stddev() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TwoNumberStatsProto::has_stddev() const {
  return _internal_has_stddev();
}
inline void TwoNumberStatsProto::clear_stddev() {
  stddev_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TwoNumberStatsProto::_internal_stddev() const {
  return stddev_;
}
inline float TwoNumberStatsProto::stddev() const {
  // @@protoc_insertion_point(field_get:caffe2.TwoNumberStatsProto.stddev)
  return _internal_stddev();
}
inline void TwoNumberStatsProto::_internal_set_stddev(float value) {
  _has_bits_[0] |= 0x00000002u;
  stddev_ = value;
}
inline void TwoNumberStatsProto::set_stddev(float value) {
  _internal_set_stddev(value);
  // @@protoc_insertion_point(field_set:caffe2.TwoNumberStatsProto.stddev)
}

// optional int64 count = 3;
inline bool TwoNumberStatsProto::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TwoNumberStatsProto::has_count() const {
  return _internal_has_count();
}
inline void TwoNumberStatsProto::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TwoNumberStatsProto::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TwoNumberStatsProto::count() const {
  // @@protoc_insertion_point(field_get:caffe2.TwoNumberStatsProto.count)
  return _internal_count();
}
inline void TwoNumberStatsProto::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void TwoNumberStatsProto::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:caffe2.TwoNumberStatsProto.count)
}

// -------------------------------------------------------------------

// BlobProfile

// optional string name = 1;
inline bool BlobProfile::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlobProfile::has_name() const {
  return _internal_has_name();
}
inline void BlobProfile::clear_name() {
  name_.ClearToEmpty(&GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BlobProfile::name() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProfile.name)
  return _internal_name();
}
inline void BlobProfile::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:caffe2.BlobProfile.name)
}
inline std::string* BlobProfile::mutable_name() {
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProfile.name)
  return _internal_mutable_name();
}
inline const std::string& BlobProfile::_internal_name() const {
  return name_.Get();
}
inline void BlobProfile::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlobProfile::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.BlobProfile.name)
}
inline void BlobProfile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.BlobProfile.name)
}
inline void BlobProfile::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobProfile.name)
}
inline std::string* BlobProfile::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlobProfile::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProfile.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlobProfile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProfile.name)
}

// optional .caffe2.TwoNumberStatsProto bytes_used = 3;
inline bool BlobProfile::_internal_has_bytes_used() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || bytes_used_ != nullptr);
  return value;
}
inline bool BlobProfile::has_bytes_used() const {
  return _internal_has_bytes_used();
}
inline void BlobProfile::clear_bytes_used() {
  if (bytes_used_ != nullptr) bytes_used_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::caffe2::TwoNumberStatsProto& BlobProfile::_internal_bytes_used() const {
  const ::caffe2::TwoNumberStatsProto* p = bytes_used_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe2::TwoNumberStatsProto*>(
      &::caffe2::_TwoNumberStatsProto_default_instance_);
}
inline const ::caffe2::TwoNumberStatsProto& BlobProfile::bytes_used() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProfile.bytes_used)
  return _internal_bytes_used();
}
inline void BlobProfile::unsafe_arena_set_allocated_bytes_used(
    ::caffe2::TwoNumberStatsProto* bytes_used) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bytes_used_);
  }
  bytes_used_ = bytes_used;
  if (bytes_used) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:caffe2.BlobProfile.bytes_used)
}
inline ::caffe2::TwoNumberStatsProto* BlobProfile::release_bytes_used() {
  _has_bits_[0] &= ~0x00000002u;
  ::caffe2::TwoNumberStatsProto* temp = bytes_used_;
  bytes_used_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::caffe2::TwoNumberStatsProto* BlobProfile::unsafe_arena_release_bytes_used() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProfile.bytes_used)
  _has_bits_[0] &= ~0x00000002u;
  ::caffe2::TwoNumberStatsProto* temp = bytes_used_;
  bytes_used_ = nullptr;
  return temp;
}
inline ::caffe2::TwoNumberStatsProto* BlobProfile::_internal_mutable_bytes_used() {
  _has_bits_[0] |= 0x00000002u;
  if (bytes_used_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe2::TwoNumberStatsProto>(GetArena());
    bytes_used_ = p;
  }
  return bytes_used_;
}
inline ::caffe2::TwoNumberStatsProto* BlobProfile::mutable_bytes_used() {
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProfile.bytes_used)
  return _internal_mutable_bytes_used();
}
inline void BlobProfile::set_allocated_bytes_used(::caffe2::TwoNumberStatsProto* bytes_used) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bytes_used_;
  }
  if (bytes_used) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bytes_used);
    if (message_arena != submessage_arena) {
      bytes_used = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes_used, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bytes_used_ = bytes_used;
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProfile.bytes_used)
}

// -------------------------------------------------------------------

// ProfDAGProto

// required string name = 1;
inline bool ProfDAGProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfDAGProto::has_name() const {
  return _internal_has_name();
}
inline void ProfDAGProto::clear_name() {
  name_.ClearToEmpty(&GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfDAGProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.name)
  return _internal_name();
}
inline void ProfDAGProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.name)
}
inline std::string* ProfDAGProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.name)
  return _internal_mutable_name();
}
inline const std::string& ProfDAGProto::_internal_name() const {
  return name_.Get();
}
inline void ProfDAGProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProfDAGProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.ProfDAGProto.name)
}
inline void ProfDAGProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.ProfDAGProto.name)
}
inline void ProfDAGProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.ProfDAGProto.name)
}
inline std::string* ProfDAGProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProfDAGProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfDAGProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProto.name)
}

// required float mean = 2;
inline bool ProfDAGProto::_internal_has_mean() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProfDAGProto::has_mean() const {
  return _internal_has_mean();
}
inline void ProfDAGProto::clear_mean() {
  mean_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ProfDAGProto::_internal_mean() const {
  return mean_;
}
inline float ProfDAGProto::mean() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.mean)
  return _internal_mean();
}
inline void ProfDAGProto::_internal_set_mean(float value) {
  _has_bits_[0] |= 0x00000004u;
  mean_ = value;
}
inline void ProfDAGProto::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.mean)
}

// required float stddev = 3;
inline bool ProfDAGProto::_internal_has_stddev() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProfDAGProto::has_stddev() const {
  return _internal_has_stddev();
}
inline void ProfDAGProto::clear_stddev() {
  stddev_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ProfDAGProto::_internal_stddev() const {
  return stddev_;
}
inline float ProfDAGProto::stddev() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.stddev)
  return _internal_stddev();
}
inline void ProfDAGProto::_internal_set_stddev(float value) {
  _has_bits_[0] |= 0x00000008u;
  stddev_ = value;
}
inline void ProfDAGProto::set_stddev(float value) {
  _internal_set_stddev(value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.stddev)
}

// optional .caffe2.TwoNumberStatsProto execution_time = 4;
inline bool ProfDAGProto::_internal_has_execution_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || execution_time_ != nullptr);
  return value;
}
inline bool ProfDAGProto::has_execution_time() const {
  return _internal_has_execution_time();
}
inline void ProfDAGProto::clear_execution_time() {
  if (execution_time_ != nullptr) execution_time_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::caffe2::TwoNumberStatsProto& ProfDAGProto::_internal_execution_time() const {
  const ::caffe2::TwoNumberStatsProto* p = execution_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe2::TwoNumberStatsProto*>(
      &::caffe2::_TwoNumberStatsProto_default_instance_);
}
inline const ::caffe2::TwoNumberStatsProto& ProfDAGProto::execution_time() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.execution_time)
  return _internal_execution_time();
}
inline void ProfDAGProto::unsafe_arena_set_allocated_execution_time(
    ::caffe2::TwoNumberStatsProto* execution_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(execution_time_);
  }
  execution_time_ = execution_time;
  if (execution_time) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:caffe2.ProfDAGProto.execution_time)
}
inline ::caffe2::TwoNumberStatsProto* ProfDAGProto::release_execution_time() {
  _has_bits_[0] &= ~0x00000002u;
  ::caffe2::TwoNumberStatsProto* temp = execution_time_;
  execution_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::caffe2::TwoNumberStatsProto* ProfDAGProto::unsafe_arena_release_execution_time() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProto.execution_time)
  _has_bits_[0] &= ~0x00000002u;
  ::caffe2::TwoNumberStatsProto* temp = execution_time_;
  execution_time_ = nullptr;
  return temp;
}
inline ::caffe2::TwoNumberStatsProto* ProfDAGProto::_internal_mutable_execution_time() {
  _has_bits_[0] |= 0x00000002u;
  if (execution_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe2::TwoNumberStatsProto>(GetArena());
    execution_time_ = p;
  }
  return execution_time_;
}
inline ::caffe2::TwoNumberStatsProto* ProfDAGProto::mutable_execution_time() {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.execution_time)
  return _internal_mutable_execution_time();
}
inline void ProfDAGProto::set_allocated_execution_time(::caffe2::TwoNumberStatsProto* execution_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete execution_time_;
  }
  if (execution_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(execution_time);
    if (message_arena != submessage_arena) {
      execution_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  execution_time_ = execution_time;
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProto.execution_time)
}

// repeated .caffe2.BlobProfile output_profile = 5;
inline int ProfDAGProto::_internal_output_profile_size() const {
  return output_profile_.size();
}
inline int ProfDAGProto::output_profile_size() const {
  return _internal_output_profile_size();
}
inline void ProfDAGProto::clear_output_profile() {
  output_profile_.Clear();
}
inline ::caffe2::BlobProfile* ProfDAGProto::mutable_output_profile(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.output_profile)
  return output_profile_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::BlobProfile >*
ProfDAGProto::mutable_output_profile() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProto.output_profile)
  return &output_profile_;
}
inline const ::caffe2::BlobProfile& ProfDAGProto::_internal_output_profile(int index) const {
  return output_profile_.Get(index);
}
inline const ::caffe2::BlobProfile& ProfDAGProto::output_profile(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.output_profile)
  return _internal_output_profile(index);
}
inline ::caffe2::BlobProfile* ProfDAGProto::_internal_add_output_profile() {
  return output_profile_.Add();
}
inline ::caffe2::BlobProfile* ProfDAGProto::add_output_profile() {
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProto.output_profile)
  return _internal_add_output_profile();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::BlobProfile >&
ProfDAGProto::output_profile() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProto.output_profile)
  return output_profile_;
}

// repeated string extra_info = 7;
inline int ProfDAGProto::_internal_extra_info_size() const {
  return extra_info_.size();
}
inline int ProfDAGProto::extra_info_size() const {
  return _internal_extra_info_size();
}
inline void ProfDAGProto::clear_extra_info() {
  extra_info_.Clear();
}
inline std::string* ProfDAGProto::add_extra_info() {
  // @@protoc_insertion_point(field_add_mutable:caffe2.ProfDAGProto.extra_info)
  return _internal_add_extra_info();
}
inline const std::string& ProfDAGProto::_internal_extra_info(int index) const {
  return extra_info_.Get(index);
}
inline const std::string& ProfDAGProto::extra_info(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.extra_info)
  return _internal_extra_info(index);
}
inline std::string* ProfDAGProto::mutable_extra_info(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.extra_info)
  return extra_info_.Mutable(index);
}
inline void ProfDAGProto::set_extra_info(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.extra_info)
  extra_info_.Mutable(index)->assign(value);
}
inline void ProfDAGProto::set_extra_info(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.extra_info)
  extra_info_.Mutable(index)->assign(std::move(value));
}
inline void ProfDAGProto::set_extra_info(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:caffe2.ProfDAGProto.extra_info)
}
inline void ProfDAGProto::set_extra_info(int index, const char* value, size_t size) {
  extra_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:caffe2.ProfDAGProto.extra_info)
}
inline std::string* ProfDAGProto::_internal_add_extra_info() {
  return extra_info_.Add();
}
inline void ProfDAGProto::add_extra_info(const std::string& value) {
  extra_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProto.extra_info)
}
inline void ProfDAGProto::add_extra_info(std::string&& value) {
  extra_info_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProto.extra_info)
}
inline void ProfDAGProto::add_extra_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  extra_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:caffe2.ProfDAGProto.extra_info)
}
inline void ProfDAGProto::add_extra_info(const char* value, size_t size) {
  extra_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:caffe2.ProfDAGProto.extra_info)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProfDAGProto::extra_info() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProto.extra_info)
  return extra_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProfDAGProto::mutable_extra_info() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProto.extra_info)
  return &extra_info_;
}

// -------------------------------------------------------------------

// ProfDAGProtos

// repeated .caffe2.ProfDAGProto stats = 1;
inline int ProfDAGProtos::_internal_stats_size() const {
  return stats_.size();
}
inline int ProfDAGProtos::stats_size() const {
  return _internal_stats_size();
}
inline void ProfDAGProtos::clear_stats() {
  stats_.Clear();
}
inline ::caffe2::ProfDAGProto* ProfDAGProtos::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProtos.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::ProfDAGProto >*
ProfDAGProtos::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProtos.stats)
  return &stats_;
}
inline const ::caffe2::ProfDAGProto& ProfDAGProtos::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::caffe2::ProfDAGProto& ProfDAGProtos::stats(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProtos.stats)
  return _internal_stats(index);
}
inline ::caffe2::ProfDAGProto* ProfDAGProtos::_internal_add_stats() {
  return stats_.Add();
}
inline ::caffe2::ProfDAGProto* ProfDAGProtos::add_stats() {
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProtos.stats)
  return _internal_add_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::ProfDAGProto >&
ProfDAGProtos::stats() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProtos.stats)
  return stats_;
}

// optional string net_name = 2;
inline bool ProfDAGProtos::_internal_has_net_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProfDAGProtos::has_net_name() const {
  return _internal_has_net_name();
}
inline void ProfDAGProtos::clear_net_name() {
  net_name_.ClearToEmpty(&GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProfDAGProtos::net_name() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProtos.net_name)
  return _internal_net_name();
}
inline void ProfDAGProtos::set_net_name(const std::string& value) {
  _internal_set_net_name(value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProtos.net_name)
}
inline std::string* ProfDAGProtos::mutable_net_name() {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProtos.net_name)
  return _internal_mutable_net_name();
}
inline const std::string& ProfDAGProtos::_internal_net_name() const {
  return net_name_.Get();
}
inline void ProfDAGProtos::_internal_set_net_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  net_name_.Set(&GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProfDAGProtos::set_net_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  net_name_.Set(
    &GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.ProfDAGProtos.net_name)
}
inline void ProfDAGProtos::set_net_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  net_name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.ProfDAGProtos.net_name)
}
inline void ProfDAGProtos::set_net_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  net_name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.ProfDAGProtos.net_name)
}
inline std::string* ProfDAGProtos::_internal_mutable_net_name() {
  _has_bits_[0] |= 0x00000001u;
  return net_name_.Mutable(&GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProfDAGProtos::release_net_name() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProtos.net_name)
  if (!_internal_has_net_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return net_name_.ReleaseNonDefault(&GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProfDAGProtos::set_allocated_net_name(std::string* net_name) {
  if (net_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  net_name_.SetAllocated(&GetEmptyStringAlreadyInited(), net_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProtos.net_name)
}

// repeated .caffe2.OpProfile ops_stats = 3;
inline int ProfDAGProtos::_internal_ops_stats_size() const {
  return ops_stats_.size();
}
inline int ProfDAGProtos::ops_stats_size() const {
  return _internal_ops_stats_size();
}
inline void ProfDAGProtos::clear_ops_stats() {
  ops_stats_.Clear();
}
inline ::caffe2::OpProfile* ProfDAGProtos::mutable_ops_stats(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProtos.ops_stats)
  return ops_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::OpProfile >*
ProfDAGProtos::mutable_ops_stats() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProtos.ops_stats)
  return &ops_stats_;
}
inline const ::caffe2::OpProfile& ProfDAGProtos::_internal_ops_stats(int index) const {
  return ops_stats_.Get(index);
}
inline const ::caffe2::OpProfile& ProfDAGProtos::ops_stats(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProtos.ops_stats)
  return _internal_ops_stats(index);
}
inline ::caffe2::OpProfile* ProfDAGProtos::_internal_add_ops_stats() {
  return ops_stats_.Add();
}
inline ::caffe2::OpProfile* ProfDAGProtos::add_ops_stats() {
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProtos.ops_stats)
  return _internal_add_ops_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::caffe2::OpProfile >&
ProfDAGProtos::ops_stats() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProtos.ops_stats)
  return ops_stats_;
}

// -------------------------------------------------------------------

// OpProfile

// optional string idx = 1;
inline bool OpProfile::_internal_has_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpProfile::has_idx() const {
  return _internal_has_idx();
}
inline void OpProfile::clear_idx() {
  idx_.ClearToEmpty(&GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpProfile::idx() const {
  // @@protoc_insertion_point(field_get:caffe2.OpProfile.idx)
  return _internal_idx();
}
inline void OpProfile::set_idx(const std::string& value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:caffe2.OpProfile.idx)
}
inline std::string* OpProfile::mutable_idx() {
  // @@protoc_insertion_point(field_mutable:caffe2.OpProfile.idx)
  return _internal_mutable_idx();
}
inline const std::string& OpProfile::_internal_idx() const {
  return idx_.Get();
}
inline void OpProfile::_internal_set_idx(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  idx_.Set(&GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpProfile::set_idx(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  idx_.Set(
    &GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.OpProfile.idx)
}
inline void OpProfile::set_idx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  idx_.Set(&GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.OpProfile.idx)
}
inline void OpProfile::set_idx(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  idx_.Set(&GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.OpProfile.idx)
}
inline std::string* OpProfile::_internal_mutable_idx() {
  _has_bits_[0] |= 0x00000001u;
  return idx_.Mutable(&GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpProfile::release_idx() {
  // @@protoc_insertion_point(field_release:caffe2.OpProfile.idx)
  if (!_internal_has_idx()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return idx_.ReleaseNonDefault(&GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpProfile::set_allocated_idx(std::string* idx) {
  if (idx != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  idx_.SetAllocated(&GetEmptyStringAlreadyInited(), idx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.OpProfile.idx)
}

// optional string net_name = 2;
inline bool OpProfile::_internal_has_net_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpProfile::has_net_name() const {
  return _internal_has_net_name();
}
inline void OpProfile::clear_net_name() {
  net_name_.ClearToEmpty(&GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OpProfile::net_name() const {
  // @@protoc_insertion_point(field_get:caffe2.OpProfile.net_name)
  return _internal_net_name();
}
inline void OpProfile::set_net_name(const std::string& value) {
  _internal_set_net_name(value);
  // @@protoc_insertion_point(field_set:caffe2.OpProfile.net_name)
}
inline std::string* OpProfile::mutable_net_name() {
  // @@protoc_insertion_point(field_mutable:caffe2.OpProfile.net_name)
  return _internal_mutable_net_name();
}
inline const std::string& OpProfile::_internal_net_name() const {
  return net_name_.Get();
}
inline void OpProfile::_internal_set_net_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  net_name_.Set(&GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpProfile::set_net_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  net_name_.Set(
    &GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.OpProfile.net_name)
}
inline void OpProfile::set_net_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  net_name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.OpProfile.net_name)
}
inline void OpProfile::set_net_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  net_name_.Set(&GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.OpProfile.net_name)
}
inline std::string* OpProfile::_internal_mutable_net_name() {
  _has_bits_[0] |= 0x00000002u;
  return net_name_.Mutable(&GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpProfile::release_net_name() {
  // @@protoc_insertion_point(field_release:caffe2.OpProfile.net_name)
  if (!_internal_has_net_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return net_name_.ReleaseNonDefault(&GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpProfile::set_allocated_net_name(std::string* net_name) {
  if (net_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  net_name_.SetAllocated(&GetEmptyStringAlreadyInited(), net_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.OpProfile.net_name)
}

// optional string type = 3;
inline bool OpProfile::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OpProfile::has_type() const {
  return _internal_has_type();
}
inline void OpProfile::clear_type() {
  type_.ClearToEmpty(&GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OpProfile::type() const {
  // @@protoc_insertion_point(field_get:caffe2.OpProfile.type)
  return _internal_type();
}
inline void OpProfile::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:caffe2.OpProfile.type)
}
inline std::string* OpProfile::mutable_type() {
  // @@protoc_insertion_point(field_mutable:caffe2.OpProfile.type)
  return _internal_mutable_type();
}
inline const std::string& OpProfile::_internal_type() const {
  return type_.Get();
}
inline void OpProfile::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(&GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OpProfile::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(
    &GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:caffe2.OpProfile.type)
}
inline void OpProfile::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  type_.Set(&GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:caffe2.OpProfile.type)
}
inline void OpProfile::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(&GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:caffe2.OpProfile.type)
}
inline std::string* OpProfile::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  return type_.Mutable(&GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OpProfile::release_type() {
  // @@protoc_insertion_point(field_release:caffe2.OpProfile.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return type_.ReleaseNonDefault(&GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpProfile::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_.SetAllocated(&GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:caffe2.OpProfile.type)
}

// optional float exec_time_secs = 4;
inline bool OpProfile::_internal_has_exec_time_secs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OpProfile::has_exec_time_secs() const {
  return _internal_has_exec_time_secs();
}
inline void OpProfile::clear_exec_time_secs() {
  exec_time_secs_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float OpProfile::_internal_exec_time_secs() const {
  return exec_time_secs_;
}
inline float OpProfile::exec_time_secs() const {
  // @@protoc_insertion_point(field_get:caffe2.OpProfile.exec_time_secs)
  return _internal_exec_time_secs();
}
inline void OpProfile::_internal_set_exec_time_secs(float value) {
  _has_bits_[0] |= 0x00000008u;
  exec_time_secs_ = value;
}
inline void OpProfile::set_exec_time_secs(float value) {
  _internal_set_exec_time_secs(value);
  // @@protoc_insertion_point(field_set:caffe2.OpProfile.exec_time_secs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_caffe2_2fproto_2fprof_5fdag_2eproto
